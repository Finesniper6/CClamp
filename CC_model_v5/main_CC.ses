{load_file("nrngui.hoc")}
objectvar save_window_, rvp_
objectvar scene_vector_[6]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

//Begin LinearCircuit[0]
{
load_file("lincir.hoc", "LinearCircuit")
}
{
ocbox_ = new LinearCircuit(1)
}
{object_push(ocbox_)}
{version(2)}
{mkelm(7, 160, 100, 1, 1.5708)}
1
0
{mklabel(0, "A1", 0.55, -3.086)}
{mklabel(3, "V_A1o", 24.355, 2.95)}
{mkelm(4, 150, -85, 2.5, -1.5708)}
{mklabel(0, "Vcmd", 30.425, 2.066)}
{sel.extra_info.restore()}
10
4.16719 0
5 0
3 -100
0 0
0 0
0 0
0 0
0 0
0 0
0 0
{mkelm(0, 150, 45, 3.5, 1.5708)}
{mkelm(1, 160, 155, 1.5, 1.5708)}
500
{mklabel(0, "Ro", -11.667, 4.946)}
{mkelm(0, 160, 180, 1, -1.5708)}
{mkelm(0, 160, 130, 1, 1.5708)}
{mkelm(0, 215, 190, 5.5, 3.14159)}
{mkelm(7, 280, 120, 1, -1.5708)}
1
0
{mklabel(0, "A2", 3.2122, 6.424)}
{mklabel(3, "V_A2o", 27.1697, 1.318)}
{mkelm(0, 280, 70, 3, -1.5708)}
{mkelm(0, 225, 40, 5.5, 3.14159)}
{mkelm(1, 160, 245, 2.5, 1.5708)}
10
{mklabel(0, "R1", -17.331, -1.573)}
{mklabel(1, "Vp", -10.0091, -10.741)}
{mkelm(0, 270, 165, 2.5, 1.5708)}
{mkelm(6, 150, -130, 2, 0)}
{mkelm(0, 190, 120, 3, 0)}
{mkelm(0, 220, -25, 14.5, 1.5708)}
{mkelm(0, 280, -75, 11.5, 1.5708)}
{mkelm(7, 160, -180, 1, 3.14159)}
1
0
{mklabel(0, "A_diff_for_Imon", 11.166, 2.881)}
{mklabel(3, "V_Imon", -16.725, 10.956)}
{mkelm(2, 180, 155, 1.5, 1.5708)}
0.00035
{mklabel(0, "Co", 16.116, 5.729)}
{mkelm(0, 170, 170, 1, 0)}
{mkelm(0, 170, 140, 1, -1.08793e-007)}
{mkelm(0, 345, 40, 6.5, 0)}
{mkelm(7, 400, 100, 1, 1.5708)}
4e-010
0.0003
{mklabel(0, "Acpn", -0.094, 0.912)}
{mkelm(2, 400, 160, 1, -1.5708)}
0.0025
{mklabel(0, "Ccpn", 17.097, 5.135)}
{mkelm(0, 335, 190, 6.5, 0)}
{mkelm(0, 160, 205, 1.5, -1.5708)}
{mkelm(0, 75, 190, 8.5, 0)}
{mkelm(7, -30, 180, 1, 3.14159)}
1
0
{mklabel(0, "A_V_out", 31.6923, 3.29)}
{mkelm(0, -50, -70, 25, 1.5708)}
{mkelm(7, -200, -330, 1, 3.14159)}
1
0
{mklabel(0, "Af_V_1", 3.714, 1.785)}
{mkelm(0, -60, -320, 1, 0)}
{mkelm(1, -85, -320, 1.5, 0)}
0.00542
{mklabel(0, "Rf_V_1a", 0.5545, -9.79)}
{mkelm(1, -120, -320, 2, 0)}
0.188
{mklabel(0, "Rf_V_1b", -1.463, -9.79)}
{mkelm(0, -100, -290, 3, -1.5708)}
{mkelm(2, -160, -260, 2, 0)}
0.11
{mklabel(0, "Cf_V_1a", -1.631, 18.423)}
{mkelm(0, -120, -260, 2, 0)}
{mkelm(0, -200, -260, 2, 0)}
{mkelm(2, -140, -345, 2.5, 1.5708)}
0.011
{mklabel(0, "Cf_V_1b", 25.625, -0.542)}
{mkelm(6, -140, -390, 2, 0)}
{mkelm(0, -160, -320, 2, 0)}
{mkelm(0, -200, -370, 2, 0)}
{mkelm(0, -180, -355, 1.5, 1.5708)}
{mkelm(0, -220, -350, 2, -1.5708)}
{mkelm(0, -220, -295, 3.5, 1.5708)}
{mkelm(0, -240, -330, 2, 0)}
{mkelm(1, -280, -330, 2, 0)}
0.00858
{mklabel(0, "Rf_V_2a", 0.07, -8.654)}
{mkelm(1, -320, -330, 2, 0)}
0.114
{mklabel(0, "Rf_V_2b", -1.673, -7.866)}
{mkelm(0, -360, -330, 2, 0)}
{mkelm(7, -400, -340, 1, 3.14159)}
1
0
{mklabel(0, "A_f_V_2", 2.44, 1.243)}
{mklabel(3, "V_out_filtered", -35.788, 5.05195)}
{mkelm(0, -300, -300, 3, -1.5708)}
{mkelm(0, -320, -270, 2, 0)}
{mkelm(2, -360, -270, 2, 0)}
0.1
{mklabel(0, "Cf_V_2a", -0.205, 19.521)}
{mkelm(0, -400, -270, 2, 0)}
{mkelm(0, -420, -305, 3.5, 1.5708)}
{mkelm(0, -420, -355, 1.5, 1.5708)}
{mkelm(0, -400, -370, 2, 0)}
{mkelm(0, -380, -360, 1, 1.5708)}
{mkelm(2, -340, -350, 2, 1.5708)}
0.01
{mklabel(0, "Cf_V_2b", 18.495, -0.468)}
{mkelm(6, -340, -390, 2, 0)}
{mkelm(0, 105, -180, 3.49999, -1.44545e-012)}
{mkelm(0, 70, -355, 17.5, 1.5708)}
{mkelm(0, 10, -530, 6, 0)}
{mkelm(1, -70, -530, 2, 0)}
0.00542
{mklabel(0, "Rf_I_1a", 1.5053, -7.581)}
{mkelm(1, -110, -530, 2, 0)}
0.188
{mklabel(0, "Rf_I_1b", -0.04, -8.013)}
{mkelm(0, -150, -530, 2, 0)}
{mkelm(7, -190, -540, 1, 3.14159)}
1
0
{mklabel(0, "Af_I_1", 2.928, 1.987)}
{mkelm(0, -210, -505, 3.5, -1.5708)}
{mkelm(0, -190, -470, 2, 0)}
{mkelm(2, -150, -470, 2, 0)}
0.11
{mklabel(0, "Cf_I_1a", -2.451, 17.241)}
{mkelm(0, -110, -470, 2, 0)}
{mkelm(0, -90, -500, 3, -1.5708)}
{mkelm(6, -130, -590, 2, 0)}
{mkelm(2, -130, -550, 2, -1.5708)}
0.011
{mklabel(0, "Cf_I_1b", 19.3415, -0.564)}
{mkelm(0, -190, -580, 2, 0)}
{mkelm(0, -170, -565, 1.5, 1.5708)}
{mkelm(0, -210, -560, 2, -1.5708)}
{mkelm(0, -230, -540, 2, 0)}
{mkelm(1, -270, -540, 2, 0)}
0.00858
{mklabel(0, "Rf_I_2a", -3.144, 11.568)}
{mkelm(1, -310, -540, 2, 0)}
0.114
{mklabel(0, "Rf_I_2b", 0.936, 11.135)}
{mkelm(0, -350, -540, 2, 0)}
{mkelm(7, -390, -550, 1, 3.14159)}
1
0
{mklabel(0, "Af_I_2", 4.018, 2.323)}
{mklabel(3, "_", -21.134, 0.208)}
{mkelm(0, -390, -590, 2, 0)}
{mkelm(0, -410, -570, 2, -1.5708)}
{mkelm(0, -370, -575, 1.5, 1.5708)}
{mkelm(0, -410, -515, 3.5, -1.5708)}
{mkelm(0, -390, -480, 2, 0)}
{mkelm(2, -350, -480, 2, 0)}
0.1
{mklabel(0, "Cf_I_2a", 1.235, 18.875)}
{mkelm(0, -310, -480, 2, 0)}
{mkelm(0, -290, -510, 3, -1.5708)}
{mkelm(2, -330, -565, 2.5, 1.5708)}
0.01
{mklabel(0, "Cf_I_2b", 21.184, -0.217)}
{mkelm(6, -330, -610, 2, 0)}
{mkelm(0, 230, -190, 5, 1.68655e-012)}
{mkelm(0, 200, -170, 2, 3.14159)}
{mkelm(6, -540, -580, 2, 0)}
{mkelm(1, -525, -560, 1.5, 0)}
500
{mklabel(0, "Ro_Imon", 1.649, 13.368)}
{mkelm(0, -440, -550, 3, 0)}
{mkelm(7, -490, -560, 1, 3.14159)}
1
0
{mklabel(0, "I_mon_filtered", 23.725, 3.681)}
{mkelm(6, -470, -590, 2, 0)}
{mkelm(2, 180, 220, 2, 0)}
0.00465
{mklabel(0, "C1", 3.938, 27.838)}
{mkelm(6, 220, 220, 2, 1.5708)}
{mkelm(1, 130, 345, 2.5, -1.5708)}
500
{mklabel(0, "R2", 14.337, 4.364)}
{mkelm(0, 170, 60, 2, -1.5708)}
{mkelm(6, 290, 160, 2, 3.14159)}
{mkelm(3, 150, -25, 3.5, 1.5708)}
3
{mklabel(0, "Lpar", 25.676, 3.0399)}
{mkelm(0, 115, -60, 3.5, 0)}
{mkelm(0, 135, 80, 1.5, 0)}
{mkelm(1, 120, 100, 2, -1.5708)}
1
{mklabel(0, "R1_A1par", -17.116, -1.2191)}
{mkelm(0, 140, 120, 2, 0)}
{mkelm(0, 145, 320, 1.5, 0)}
{mkelm(0, 160, 295, 2.5, -1.5708)}
{mkelm(0, 180, 320, 2, 0)}
{mkelm(2, 200, 345, 2.5, 1.5708)}
0
{mklabel(0, "C2", 29.42, 4.364)}
{mkelm(0, 145, 370, 1.5, 0)}
{mkelm(0, 180, 370, 2, 0)}
{mkelm(0, 160, 390, 2, 1.5708)}
{mkelm(1, 400, 180, 1, 1.5708)}
0.65
{mklabel(0, "Rcpn", 19.919, 3.147)}
{mkelm(0, 410, 60, 2, -1.5708)}
{mkelm(0, 400, 125, 0.500001, 1.57079)}
{mkelm(6, 390, 60, 2, 0)}
{mkelm(3, 400, 140, 0.999999, 1.5708)}
17
{mklabel(0, "L130", 15, 15)}
{mkelm(7, 10, -50, 1, 3.14159)}
1e-009
0
{mklabel(0, "A_BB", 4.1634, -0.2045)}
{mklabel(3, "v_BB", 1.19843, -10.8038)}
{mkelm(1, 30, -50, 1, -1.5708)}
0.02
{mklabel(0, "R1_A_BB", 25.6769, 4.2119)}
{mkelm(1, 40, -60, 1, 0)}
10
{mklabel(0, "R2_A_BB", 12.1438, -8.7531)}
{mkelm(6, 30, -20, 2, 3.14159)}
{mkelm(0, -10, 60, 11, -1.5708)}
{mkelm(0, 65, -60, 1.5, 0)}
{mkelm(6, 160, 430, 2, 3.14159)}
{parasitic_ = 0  noconsist_ = 0}
{graphlist.append(new LincirGraph(this, 1))}
1
I_mon_filtered I (nA)
1 1 0.8 0.9 2
7.05783 12.8362 -0.326967 0.0473667 // graph size
652 61 336.6 341.1 // box size
// end info
{g.exec_menu("Simulate")  tool(2)}
{sel = nil}
{object_pop()}
{
{
save_window_=ocbox_.g
save_window_.size(0,300,0,200)
scene_vector_[2] = save_window_
ocbox_.g = save_window_
save_window_.save_name("ocbox_.g")
save_window_.label(160.55, 96.914, "A1", 1, 1, 0.5, 0.5, 1)
save_window_.label(184.355, 122.95, "V_A1o", 1, 1, 0.5, 0.5, 1)
save_window_.label(180.425, -82.934, "Vcmd", 1, 1, 0.5, 0.5, 1)
save_window_.label(148.333, 159.946, "Ro", 1, 1, 0.5, 0.5, 1)
save_window_.label(283.212, 126.424, "A2", 1, 1, 0.5, 0.5, 1)
save_window_.label(307.17, 101.318, "V_A2o", 1, 1, 0.5, 0.5, 1)
save_window_.label(142.669, 243.427, "R1", 1, 1, 0.5, 0.5, 1)
save_window_.label(149.991, 209.259, "Vp", 1, 1, 0.5, 0.5, 1)
save_window_.label(171.166, -177.119, "A_diff_for_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(123.275, -169.044, "V_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(196.116, 160.729, "Co", 1, 1, 0.5, 0.5, 1)
save_window_.label(399.906, 100.912, "Acpn", 1, 1, 0.5, 0.5, 1)
save_window_.label(417.097, 165.135, "Ccpn", 1, 1, 0.5, 0.5, 1)
save_window_.label(1.6923, 183.29, "A_V_out", 1, 1, 0.5, 0.5, 1)
save_window_.label(-196.286, -328.215, "Af_V_1", 1, 1, 0.5, 0.5, 1)
save_window_.label(-84.4455, -329.79, "Rf_V_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-121.463, -329.79, "Rf_V_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-161.631, -241.577, "Cf_V_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-114.375, -345.542, "Cf_V_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-279.93, -338.654, "Rf_V_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-321.673, -337.866, "Rf_V_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-397.56, -338.757, "A_f_V_2", 1, 1, 0.5, 0.5, 1)
save_window_.label(-455.788, -334.948, "V_out_filtered", 1, 1, 0.5, 0.5, 1)
save_window_.label(-360.205, -250.479, "Cf_V_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-321.505, -350.468, "Cf_V_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-68.4947, -537.581, "Rf_I_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-110.04, -538.013, "Rf_I_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-187.072, -538.013, "Af_I_1", 1, 1, 0.5, 0.5, 1)
save_window_.label(-152.451, -452.759, "Cf_I_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-110.659, -550.564, "Cf_I_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-273.144, -528.432, "Rf_I_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-309.064, -528.865, "Rf_I_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-385.982, -547.677, "Af_I_2", 1, 1, 0.5, 0.5, 1)
save_window_.label(-431.134, -549.792, "_", 1, 1, 0.5, 0.5, 1)
save_window_.label(-348.765, -461.125, "Cf_I_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-308.816, -565.217, "Cf_I_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-523.351, -546.632, "Ro_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(-466.275, -556.319, "I_mon_filtered", 1, 1, 0.5, 0.5, 1)
save_window_.label(183.938, 247.838, "C1", 1, 1, 0.5, 0.5, 1)
save_window_.label(144.337, 349.364, "R2", 1, 1, 0.5, 0.5, 1)
save_window_.label(175.676, -21.9601, "Lpar", 1, 1, 0.5, 0.5, 1)
save_window_.label(102.884, 98.7809, "R1_A1par", 1, 1, 0.5, 0.5, 1)
save_window_.label(229.42, 349.364, "C2", 1, 1, 0.5, 0.5, 1)
save_window_.label(419.919, 183.147, "Rcpn", 1, 1, 0.5, 0.5, 1)
save_window_.label(415, 155, "L130", 1, 1, 0.5, 0.5, 1)
save_window_.label(14.1634, -50.2045, "A_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(-8.80157, -60.8037, "v_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(55.6769, -45.7881, "R1_A_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(52.1438, -68.7531, "R2_A_BB", 1, 1, 0.5, 0.5, 1)
}
ocbox_.map("LinearCircuit[0]", 1158, 9, 489.6, 795.6)
}
objref ocbox_
//End LinearCircuit[0]


//Begin LinearCircuit[1]
{
load_file("lincir.hoc", "LinearCircuit")
}
{
ocbox_ = new LinearCircuit(1)
}
{object_push(ocbox_)}
{version(2)}
{mkelm(1, 100, 160, 2, 1.5708)}
500
{mklabel(0, "R_struct", -27.643, 4.932)}
{mkelm(2, 180, 160, 2, 1.5708)}
0
{mklabel(0, "Cstruct", 32.68, 4.033)}
{mkelm(0, 120, 180, 2, 0)}
{mkelm(6, 140, 200, 2, 3.14159)}
{mkelm(0, 160, 180, 2, 0)}
{mkelm(0, 120, 140, 2, 0)}
{mkelm(5, 140, 120, 2, 1.5708)}
{mklabel(0, "I135", 17.81, 0.857)}
{mklabel(2, "V_struct", 15, 15)}
{sel.extra_info.restore()}
5
4.1672 0
5 0
3 -0.2
0 0
0 0
{mkelm(0, 160, 140, 2, 0)}
{mkelm(6, 140, 80, 2, 0)}
{parasitic_ = 0  noconsist_ = 0}
{g.exec_menu("Simulate")  tool(2)}
{sel = nil}
{object_pop()}
{
{
save_window_=ocbox_.g
save_window_.size(0,300,0,200)
scene_vector_[4] = save_window_
ocbox_.g = save_window_
save_window_.save_name("ocbox_.g")
save_window_.label(72.357, 164.932, "R_struct", 1, 1, 0.5, 0.5, 1)
save_window_.label(212.68, 164.033, "Cstruct", 1, 1, 0.5, 0.5, 1)
save_window_.label(157.81, 120.857, "I135", 1, 1, 0.5, 0.5, 1)
save_window_.label(155, 155, "V_struct", 1, 1, 0.5, 0.5, 1)
}
ocbox_.map("LinearCircuit[1]", -16, 516, 520.2, 426.6)
}
objref ocbox_
//End LinearCircuit[1]

{
xpanel("RunControl", 0)
v_init = 0
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 200
xvalue("t","t", 2 )
tstop = 200
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.004
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 250
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.05
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 0.32
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(823,526)
}
objectvar scene_vector_[1]
{doNotify()}
