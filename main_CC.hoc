load_file("nrngui.hoc")

//load_file("current_source.ses")
//load_file("main_for_MC_test_w_parasitic.ses")
load_file("main_CC.ses")
load_file("filter_settings.hoc")


objref Greal,Vreal, real_data
Greal=new Graph()
Greal.addvar("V_out", &LinearCircuit[0].V_out_filtered, 2,3)
Greal.addvar("V_ideal", &LinearCircuit[1].V_struct, 3,3) //there is a second LinCirc to see the response of an ideal, non-disturbed structure described as a simple RC circuit.  
Greal.flush()
proc get_real_data(){


Vreal = new Vector()		
real_data=new File()
real_data.ropen($s01)
Vreal.scanf(real_data)
Vreal.plot(Greal,dt)

}
proc real1(){
get_real_data("R1=10_C1=2o7_R2=500_C2=32_woBB_woCPN.dat")
}
proc real2(){
get_real_data("R1=10_C1=2o7_R2=500_C2=32_woBB_CPFopt.dat")
}
proc real3(){
get_real_data("R1=10_C1=2o7_R2=500_C2=1o05_woBB_CPN=6o891.dat")
}

proc real4(){
get_real_data("R1=10_C1=2o7_R2=500_woC2_woBB_CPN=7o012.dat")
}

proc real5(){
get_real_data("R1=10_C1=2o7_R2=500_woC2_woBB_woCPN.dat")
}

proc real6(){
get_real_data("R1=10_C1=2o7_R2=500_C2=32_BB=10_woCPN.dat")
}
proc real7(){
get_real_data("R1=10_C1=2o7_R2=500_C2=32_BB=10_CPFopt.dat")
}


proc real8(){
get_real_data("R1=10_C1=2o7_R2=500_C2=1o05_BB=75_CPN=6o891.dat")
}

proc real9(){
get_real_data("R1=20_C1=0_R2=0_C2=0_woBB_woCPN.dat")
}

proc real10(){
get_real_data("R1=50_C1=0_R2=0_C2=0_woBB_woCPN.dat")
}


proc real11(){
get_real_data("R1=100_C1=0_R2=0_C2=0_woBB_woCPN.dat")
}


graphList[0].append(Greal)


xpanel("realdata")
                xbutton("R1=20_C1=0_R2=0_C2=0_woBB_woCPN","real9()")  	
                xbutton("R1=50_C1=0_R2=0_C2=0_woBB_woCPN","real10()")  
                xbutton("R1=100_C1=0_R2=0_C2=0_woBB_woCPN","real11()")  				
                xbutton("R1=10_C1=2o7_R2=500_woC2_woBB_woCPN","real5()")
                xbutton("R1=10_C1=2o7_R2=500_woC2_woBB_CPN=7o012","real4()")
                xbutton("R1=10_C1=2o7_R2=500_C2=32_woBB_woCPN","real1()")
				xbutton("R1=10_C1=2o7_R2=500_C2=32_BB=10_woCPN","real6()")		
                xbutton("R1=10_C1=2o7_R2=500_C2=32_woBB_CPN=5.778","real2()")  
				xbutton("R1=10_C1=2o7_R2=500_C2=32_BB=10_CPN=5.778","real7()")		
                xbutton("R1=10_C1=2o7_R2=500_C2=1o05_woBB_CPN=6o891","real3()")  
                xbutton("R1=10_C1=2o7_R2=500_C2=1o05_BB=75_CPN=6o891","real8()")  				
				
		
xpanel()		


proc set_CPN(){
desired_CPN=$01
if (desired_CPN == 0){
LinearCircuit[0].Acpn_Gain=(1e-9/1000)/LinearCircuit[0].Ccpn
}else{
LinearCircuit[0].Acpn_Gain=(desired_CPN/1000)/LinearCircuit[0].Ccpn
}
}

proc set_BB(){
desired_BB=$01
if (desired_BB == 0){
LinearCircuit[0].A_BB_Gain=1e-9
}else{
LinearCircuit[0].A_BB_Gain=desired_BB
}
}



proc set_protocol(){
//set conversion factors Vcmd(in mV)=desired i_step(in pA)*conversion_factor
l_epoch=266.7//in the protocol used for the constraining
desired_current=$01
if(LinearCircuit[0].Ro == 50){	conversion_factor=.05}
if(LinearCircuit[0].Ro  == 500){	conversion_factor=.5}
if(LinearCircuit[0].Ro == 5000){	conversion_factor=5 }
//set Clampex style first_holding_lenght
LinearCircuit[0].Vcmd_dur0=l_epoch/64
LinearCircuit[0].Vcmd_amp2=desired_current*conversion_factor
}

set_protocol(-200)

set_filter(100,100)


/*

3.ses looks fine to represent an ideal CC circuit. 
4.ses I removed some unnecessary? components from the Imon part. The removed components are present in the Kyoto style amplifier, but Dagan apparently neglects those items.
Later on should test weather those voltage buffers are important to generate the proper I-mon signal or not.
I introduced an inductor to the current signal generatoras the first time dependent component. It produce an appropriate filtering of the Io. The effect depends on the R1 R2 and L1.
Importantly, params downstream to the can affect the rise of the command. Should test the effect of different Ro on the rise....
5.ses Introducing a capacitive component associated with the Ro. It reproduces the capacitive overcharge observed at lo res pipettes.
6.ses introducing the highly simplified CPN circuit. It consist of an ideal amplifier, a current injecting capacitor and a resistor. 
building the test circuit with Rpip, Rstruct C1, C2, Cslow, Rslow
potential caveats:
the real case the command shape does not depend on the Ro and the CPN circuit has much less effect on the command shape (at least in case of MC700B)
7.ses reducing R1 and R2 at A1 helps to keep the command shape independent to the CPN.
to constrain I-mon set H1 R1 R2. 
8.ses i replaced the ideal A CPN gain with a pair of resistances according to the kyoto amplifier. In this case I have a fixed resistance R CPN and a variable resistance to set the 
proper gain. 
 
if Rvar larger than RCPN * (CCPN/[Celectrode+Cstray])>>>> undercompensated circuit
if Rvar equals to RCPN * (CCPN/[Celectrode+Cstray])>>>>>compensated circuit
if Rvar smaller than RCPN * (CCPN/[Celectrode+Cstray])>>>> overcompensated circuit
caveats: I can use that circuit with A_CPN gain >=1. according to the gain of a 

11. downgraded version. i put the inductor back because C parallel with R1 destroyed the I mon signal at certain circumstances. I went back with the CPN to the idealized amplifier, to get negative and zero gain. 
-----
I did many measurements on the C1 setup Ch1 to study the behavior of current injecting circuit and the capacitive load of the system in different conditions (//MC_test/book.txt):

1# headstage alone (headstage output pin connected back to the headstage ground via different resistors [20M,50M, 100M, 500M], at different Rf[50M, 500M, 5G])
2# headstage+whole grounding circuit (headstage output pin connected to the ACSF-immersed ground via different resistors [20M,50M, 100M, 500M],at different Rf[50M, 500M, 5G])
3# headstage+holder+whole grounding circuit (silwr wire of the holder connected to the ACSF-immersed ground via different resistors [20M,50M, 100M, 500M], at different Rf[50M, 500M, 5G])

based on the obtained data set i will start to explore the exact Rf and related capacitance values of the headstage.

Ro_Co_fit8.ses summary of the staff I did so far:
I introduced the 4 pole filter set necessary to compare model behavior with real data.
It is an active filter design with Sallen Key topologies to obtain the desired lowpass filter behaviour. I got the resistive and capacitive parameters using the filter wizard tool of 
Analog Devices Inc. (see filter set.jpg, and filter settings.hoc)
I realized that I am able to reproduce the headstage Vp signal by introducing some parasitic elements upstream to A1 which may valid because VCmd is generated by the AD board and it has to propagate via a BNC toward the amplifier.
The problem is that such parasitic elements are able to distort the V_Imon signal too. Other issue is that real amplifier shows exactly the same V_Imon signal in case when the current command 
is generated using the Amplifier built in signal generator (pulse command in CC). 
The model pointed out that Co value differs according to the Ro element. Exact Ro and Co values has to be determine by comparing model signals with the real.
I build the necessary MultipleRunFitter.









